git --version

use git bash



---------------------git config ----------------------------
git config --global user.name "johnabish123"
git config --global user.email "johnabish6@gmail.com"
 git config --global core.editor "code --wait "
git config --global -e
git config --global core.autocrlf true   -----------for windows
git config --global core.autocrlf input   -----------for linux,mac

-------------------------git help-------------------------------------------
 git config --help
 git config -h
 
 
 ----------------git basics ----------------------------------------------
 git init
 ls 
 ls -a
 
  git ls-files  
 
 ------------remove git -------------------------------------------------
 rm -rf .git
 
 ----------------------------workflow------------------------------------
 git add .
 git add GitCommands.txt file2.txt
 git add *.txt
 
 git status
 
 
 git commit -m "our commit comment"
 
 git commit     -----to add more detailss. opens the vs . then save and close file which is opened to commit
 
 -------------------------- Skipping the area----------------------------------------------
 git commit -am "just a direct commit test messgae"
 
 -------------------------------Removing fiels-----------------------------------------
 rm file2.txt
 git add .
 git status
 git commit -m "remove the file2"
 
 git rm file2.txt
 git commit -am "remove file2 directly using git rm"
 
 git rm -h
 
 ----------------------renaming or moving files-------------------------------------------------- 
 mv file.txt h.txt
 git mv h.txt a.txt
 
 ---------------------------ignoring files---------------------------------------------
 touch .gitignore
 echo logs/ > .gitignore
  code .gitignore
  git commit -am "add git ignore"
  
 -------to ignore file which is already committed----
 --  use git rm -h
 
 
 git rm --cached a.txt
 
 --to remove dir from index
  git rm --cached -r bin/
  
  
  github.com/gitignore  -- to get details of all programming language ignore pattern
  
 
 -----------------------------short status ------------------------------------------- 
 git status -s 
 
M  GitCommands.txt
AM q.txt

 left column - in stage
 right column - not in stage
 
 M- modified
 A- added
 ? - not staged 
 
 
 --------------------------------View staged and unstaged file changes----------------------------------------
 ---to get all details of staged and commited files
 git diff --staged
 
 --differenece in staged and unstaged
 git diff 
 
 
 ---------------------------visual diff tools--------------------------------------------- 
 git config --global diff.tool vscode
 
 git config --global difftool.vscode.cmd "code --wait --diff $LOCAL $REMOTE"
 
  git config --global -e
  
  after openining gitconifg in vscode 
  [difftool "vscode"]
	cmd = "code --wait --diff $LOCAL $REMOTE"
	
	add the missing local and remote manually
	
	
git difftool
--for staged and unstaged

git difftool --staged
 --------------------------viewing the history----------------------------------------------
 git log
git log --oneline
 git log --oneline --reverse
 
 
 -----------------------------viewing the commit------------------------------------------- 
 git show e9791a3
 
 git show Head~1
 
  git show Head~1:.gitignore
  
 git ls-tree Head~1

blobs - file
Trees - Dir


 --------------------------------unstaging changes----------------------------------------

 --from last staged to unstage
 git restore --staged GitCommands.txt
 
 
 git restore --staged .
 
 
 
 ---------------------------discarding local changes--------------------------------------------- 
 
 --from stage to local
 git restore GitCommands.txt
 
  git clean -fd
  
  
 -------------restoring file to an earlier status-----------------------------------------------------------
 git restore --source Head~1 a.txt
 ------------------------------------------------------------------------ 
 
 Browsing history
 Branching and merging
 collaboration
 rewriting history
 
 
 ----------------------------------------------
 
 end of mosh course
 
 
 
 
 ----------------------------------git merge rebase squash--------------------------------------
 git merge  - make a knot between main and feature branch
 when commit , , one merge commit will be added 
 this will make a mess in history of commit
 
 
 git rebase -  moved the feature branch into the tip of the main branch -fast forward merge
 when doing this , all the feature branch commit will be converted into 
 single line of history 
 easy to maintain a history
 
 
 squahs
 
 it squashes all commit to the last commit of the main bracnhc?
 
 like a - f ,b - f ,c - f
 
 we will loose the history of commit of feature branch
 
 
 -----------------------------branches------------------------------------------- 
 --start braqnch from main
 git branch JohnBranch
 
 
 --to start git branch previous or another commit
 git branch second-branch dd833f
 
 
 

 --------------------------------check out ----------------------------------------
 
 git checkout fifth-branch
 git switch third-branch
 
 --rename 
 git branch -m fifth-branch2
 
 git branch
 git branch -m fourth-branch fourth-branch2
 
 
 
 
 
 ---------------------working wiht git remote branches--------------------------------------------------- 
 
 git remote add origin https://github.com/johnabish123/GitCommanFiles.git
 
 git branch -M main
 git branch -M branch2
 git add .
 git commit -m "adding from branch2 .working with git remote b
 ranches"
 git push -u origin branch2
 
  git branch -M branch3
  
 git push origin --delete branch3
 
 --this will push the local branch to remote , which makes the branch3 as a local and remote one
 git push -u origin branch3
 
 
 --pushing local branch to remote, this command will make a branch on remote
 git push -u origin mybranch
 
 
 
 
 
 -----------------------------------tracking branches-------------------------------------
  git branch --track branch2 origin/branch2
  git branch
  
  git checkout --track origin/branch4
  
  
  
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------
 ------------------------------------------------------------------------ 
 ------------------------------------------------------------------------
 ------------------------------------------------------------------------

winget install --id Git.Git -e --source winget

cd go to the dir

 git init

git status

 git add .

 git commit -m "committing a text file"


echo "# MyJavaCode" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/johnabish123/MyJavaCode.git
git push -u origin main